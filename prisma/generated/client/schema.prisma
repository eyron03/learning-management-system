// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  TEACHER
  STUDENT
}

enum GradeLevel {
  GRADE_1
  GRADE_2
  GRADE_3
  GRADE_4
  GRADE_5
  GRADE_6
}

enum AdmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AdmissionType {
  NEW_STUDENT
  TRANSFEREE
}

enum CivilStatus {
  SINGLE
  MARRIED
  WIDOWED
  SEPARATED
  DIVORCED
}

enum NameSuffix {
  JR
  SR
  I
  II
  III
  IV
  V
}

model Admin {
  id       String   @id @default(cuid())
  email    String   @unique
  username String   @unique
  password String
  role     UserRole @default(SUPER_ADMIN)
}

model Teacher {
  id            String     @id @default(cuid())
  email         String     @unique
  name          String
  middle_name   String?
  last_name     String
  username      String     @unique
  password      String
  phone_number  String
  address       String
  role          UserRole   @default(TEACHER)
  date_of_birth DateTime
  subjects      Subject[]
  classroom     Classroom? @relation("TeacherClassroom")
}

model Student {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  middle_name   String?
  last_name     String
  username      String    @unique
  password      String
  role          UserRole  @default(STUDENT)
  phone_number  String
  date_of_birth DateTime
  classroom     Classroom @relation(fields: [classroom_id], references: [id])
  classroom_id  String
}

model Subject {
  id         String   @id @default(cuid())
  name       String   @unique
  teacher    Teacher? @relation(fields: [teacher_id], references: [id])
  teacher_id String?
}

model Classroom {
  id          String     @id @default(cuid())
  name        String     @unique
  grade_level GradeLevel
  teacher     Teacher?   @relation("TeacherClassroom", fields: [teacher_id], references: [id])
  teacher_id  String?    @unique
  students    Student[]
}

model StudentApplication {
  id            String       @id @default(cuid())
  first_name    String
  middle_name   String?
  last_name     String
  suffix        NameSuffix?
  gender        String
  civil_status  CivilStatus?
  date_of_birth DateTime
  birth_place   String
  nationality   String
  email         String       @unique
  phone_number  String
  tel_number    String?

  permanent_address String
  current_address   String
  postal_code       String

  father_id   String?
  father      Parent?   @relation("Father", fields: [father_id], references: [id])
  mother_id   String?
  mother      Parent?   @relation("Mother", fields: [mother_id], references: [id])
  guardian_id String?
  guardian    Guardian? @relation(fields: [guardian_id], references: [id])

  medical_record_id String?
  medical_record    MedicalRecord? @relation(fields: [medical_record_id], references: [id])

  admission Admission?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Admission {
  id         String             @id @default(cuid())
  student_id String             @unique
  student    StudentApplication @relation(fields: [student_id], references: [id])

  admission_type       AdmissionType
  intended_grade_level String
  previous_school_id   String?
  previous_school      School?       @relation(fields: [previous_school_id], references: [id])

  status     AdmissionStatus @default(PENDING)
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
}

model Parent {
  id            String  @id @default(cuid())
  first_name    String
  middle_name   String?
  last_name     String
  occupation    String
  annual_income Float?

  children_as_father StudentApplication[] @relation("Father")
  children_as_mother StudentApplication[] @relation("Mother")
}

model Guardian {
  id           String               @id @default(cuid())
  name         String
  relation     String
  phone_number String
  students     StudentApplication[]
}

model MedicalRecord {
  id                    String               @id @default(cuid())
  has_medical_condition Boolean              @default(false)
  medical_condition     String?
  student_applications  StudentApplication[]
}

model School {
  id                       String      @id @default(cuid())
  name                     String
  address                  String
  last_year_level          String?
  last_school_year         String?
  general_weighted_average Float?
  admissions               Admission[]
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "./generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  TEACHER
  STUDENT
}

enum GradeLevel {
  GRADE_1
  GRADE_2
  GRADE_3
  GRADE_4
  GRADE_5
  GRADE_6
}

enum AdmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AdmissionType {
  NEW_STUDENT
  TRANSFEREE
}

enum CivilStatus {
  SINGLE
  MARRIED
  WIDOWED
  SEPARATED
  DIVORCED
}

enum NameSuffix {
  JR
  SR
  I
  II
  III
  IV
  V
}

model Admin {
  id       String   @id @default(cuid())
  email    String   @unique
  username String   @unique
  password String
  role     UserRole @default(SUPER_ADMIN)
}

model Teacher {
  id            String     @id @default(cuid())
  email         String     @unique
  name          String
  middle_name   String?
  last_name     String
  username      String     @unique
  password      String
  phone_number  String
  address       String
  role          UserRole   @default(TEACHER)
  date_of_birth DateTime
  subjects      Subject[]
  classroom     Classroom? @relation("TeacherClassroom")
  classroom_id  String?    @unique
}

model Student {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  middle_name   String?
  last_name     String
  username      String    @unique
  password      String
  role          UserRole  @default(STUDENT)
  phone_number  String
  date_of_birth DateTime
  classroom     Classroom @relation(fields: [classroom_id], references: [id])
  classroom_id  String
}

model Subject {
  id         String   @id @default(cuid())
  name       String   @unique
  teacher    Teacher? @relation(fields: [teacher_id], references: [id])
  teacher_id String?
}

model Classroom {
  id          String     @id @default(cuid())
  name        String     @unique
  grade_level GradeLevel
  teacher     Teacher?   @relation("TeacherClassroom", fields: [teacher_id], references: [id])
  teacher_id  String?    @unique
  students    Student[]
}

model StudentApplication {
  id            String      @id @default(cuid())
  control_no    String
  first_name    String
  middle_name   String?
  last_name     String
  suffix        NameSuffix?
  gender        String
  date_of_birth DateTime
  birth_place   String
  nationality   String
  email         String      @unique
  phone_number  String
  tel_number    String?
  religion      String

  medical_record_id String?
  medical_record    MedicalRecord? @relation(fields: [medical_record_id], references: [id], onDelete: SetNull)

  admission         Admission?
  home_address      HomeAddress?
  family_background FamilyBackground?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model HomeAddress {
  id                     String             @id @default(cuid())
  street                 String
  city                   String
  province               String
  postal_code            String
  student_application_id String             @unique
  student_application    StudentApplication @relation(fields: [student_application_id], references: [id], onDelete: Cascade)
}

model FamilyBackground {
  id String @id @default(cuid())

  father_first_name    String?
  father_middle_name   String?
  father_last_name     String?
  father_occupation    String?
  father_civil_status  CivilStatus?
  father_annual_income Float?
  father_phone_number  String?
  father_deceased      Boolean      @default(false)

  mother_first_name    String?
  mother_middle_name   String?
  mother_last_name     String?
  mother_occupation    String?
  mother_civil_status  CivilStatus?
  mother_annual_income Float?
  mother_phone_number  String?
  mother_deceased      Boolean      @default(false)

  guardian_first_name    String?
  guardian_middle_name   String?
  guardian_last_name     String?
  guardian_occupation    String?
  guardian_annual_income Float?
  guardian_phone_number  String?

  student_application_id String             @unique
  student_application    StudentApplication @relation(fields: [student_application_id], references: [id], onDelete: Cascade)
}

model MedicalRecord {
  id                    String               @id @default(cuid())
  has_medical_condition Boolean              @default(false)
  medical_condition     String?
  student_applications  StudentApplication[]
}

model Admission {
  id                   String             @id @default(cuid())
  student_id           String             @unique
  student              StudentApplication @relation(fields: [student_id], references: [id], onDelete: Cascade)
  admission_type       AdmissionType
  intended_grade_level String
  previous_school_id   String?
  previous_school      School?            @relation(fields: [previous_school_id], references: [id], onDelete: SetNull)
  status               AdmissionStatus    @default(PENDING)
  created_at           DateTime           @default(now())
  updated_at           DateTime           @updatedAt
}

model School {
  id                       String      @id @default(cuid())
  name                     String      @unique
  address                  String
  last_year_level          String?
  last_school_year         String?
  general_weighted_average Float?
  admissions               Admission[]
}
